{"version":3,"sources":["currenyCode.ts","IntlUtils.tsx","IntlEditors.tsx","IntlFormatters.tsx","index.tsx"],"names":["currencyCode","getNumberFormat","memoizeIntlConstructor","Intl","NumberFormat","intlStyle","DECIMAL","PERCENT","CURRENCY","defaultFractionDigits","extraFractionDigits","RATE","TECH_RATE","getDefaultFractionDigitsForLocale","locale","options","_numberFormat$resolve","resolvedOptions","minimumFractionDigits","maximumFractionDigits","NEGATIVE_SYMBOL","DECIMAL_REGEX","NEGATIVE_DECIMAL_REGEX","NUMBER_REGEX","NEGATIVE_NUMBER_REGEX","replaceDecimalSeparator","value","separator","toString","replace","NumberEditorBase","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","decimalSeparator","allowNegative","state","input","React","isCopyPaste","checkValidity","arguments","length","undefined","test","internalSetState","stateToSet","style","isValueChanged","hasOwnProperty","_ref","objectWithoutProperties","setState","valueToSave","onChange","handleCopyPaste","pastedValue","parsedValue","trim","regex","RegExp","concat","isNegative","parseFloat","Number","isNaN","parseNumber","isPastedValueValid","displayValue","isInvalid","handleChange","_ref2","target","isInteger","negativeFormattedValue","slice","removeNegativeSymbol","assertThisInitialized","_displayValue$split","split","_displayValue$split2","slicedToArray","displayValueIntegerPart","displayValueDecimalPart","roundedDisplayValue","handleFocus","isFocused","handleBlur","getDisplayValue","handleClick","handleKeyDown","e","ctrlKey","metaKey","altKey","keyCode","handlePaste","getInputProps","_this$props","name","title","tabIndex","disabled","readOnly","_this$state","inputValue","formatValue","ref","onFocus","onBlur","onKeyDown","onClick","onPaste","_this$props2","intl","currency","_this$props2$allowNeg","minimumFractionDigitsForStyle","_getDefaultFractionDi2","minimumFractionDigitsForLocale","maximumFractionDigitsForLocale","formatNumber","getInitialState","autoFocus","current","focus","prevProps","prevState","_this$state2","select","_this$props3","valueToTest","stringToWorkOn","stringToReplace","stringToReplaceWith","ignoreCase","re","replaceAll","_this$props4","fractionDigits","decimalOptions","testPastedValue","objectSpread","useGrouping","currencyOptions","percentOptions","_this$props5","getValue","children","getRenderProps","NumberEditor","injectIntl","errorMessage","errorIcon","react","Icon","link","DefaultGridNumberInput","_ref3","Input","assign","className","icon","iconPosition","gridNumberEditorFactory","intlProps","_React$Component2","GridNumberEditor","_getPrototypeOf2","_this2","_len","args","Array","_key","apply","defaultValue","inherits","createClass","key","_this$props6","rest","p","GridIntegerEditor","GridDecimalEditor","GridPercentEditor","GridCurrencyEditor","GridRateEditor","DefaultFormNumberInput","_ref4","display","error","formNumberEditorFactory","_ref5","NumberFormatter","index_es","DecimalFormatter","PercentFormatter","CurrencyFormatter","DefaultCurrencyFormatter","RateFormatter","TechRateFormatter","en","require","fr","is","addLocaleData","toConsumableArray","Editors","defineProperty","margin","marginTop","type","sort","map","c","Formatters","currencyFormatterValue","decimalFormatterValue","percentFormatterValue","rateFormatterValue","techRateFormatterValue","App","console","log","src_Editors","src_Formatters","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.c201e1b9.chunk.js","sourcesContent":["export const currencyCode = [\r\n    'AFN',\r\n    'EUR',\r\n    'ALL',\r\n    'DZD',\r\n    'USD',\r\n    'EUR',\r\n    'AOA',\r\n    'XCD',\r\n    'XCD',\r\n    'ARS',\r\n    'AMD',\r\n    'AWG',\r\n    'AUD',\r\n    'EUR',\r\n    'AZN',\r\n    'BSD',\r\n    'BHD',\r\n    'BDT',\r\n    'BBD',\r\n    'BYN',\r\n    'EUR',\r\n    'BZD',\r\n    'XOF',\r\n    'BMD',\r\n    'INR',\r\n    'BTN',\r\n    'BOB',\r\n    'BOV',\r\n    'USD',\r\n    'BAM',\r\n    'BWP',\r\n    'NOK',\r\n    'BRL',\r\n    'USD',\r\n    'BND',\r\n    'BGN',\r\n    'XOF',\r\n    'BIF',\r\n    'CVE',\r\n    'KHR',\r\n    'XAF',\r\n    'CAD',\r\n    'KYD',\r\n    'XAF',\r\n    'XAF',\r\n    'CLP',\r\n    'CLF',\r\n    'CNY',\r\n    'AUD',\r\n    'AUD',\r\n    'COP',\r\n    'COU',\r\n    'KMF',\r\n    'CDF',\r\n    'XAF',\r\n    'NZD',\r\n    'CRC',\r\n    'XOF',\r\n    'HRK',\r\n    'CUP',\r\n    'CUC',\r\n    'ANG',\r\n    'EUR',\r\n    'CZK',\r\n    'DKK',\r\n    'DJF',\r\n    'XCD',\r\n    'DOP',\r\n    'USD',\r\n    'EGP',\r\n    'SVC',\r\n    'USD',\r\n    'XAF',\r\n    'ERN',\r\n    'EUR',\r\n    'ETB',\r\n    'EUR',\r\n    'FKP',\r\n    'DKK',\r\n    'FJD',\r\n    'EUR',\r\n    'EUR',\r\n    'EUR',\r\n    'XPF',\r\n    'EUR',\r\n    'XAF',\r\n    'GMD',\r\n    'GEL',\r\n    'EUR',\r\n    'GHS',\r\n    'GIP',\r\n    'EUR',\r\n    'DKK',\r\n    'XCD',\r\n    'EUR',\r\n    'USD',\r\n    'GTQ',\r\n    'GBP',\r\n    'GNF',\r\n    'XOF',\r\n    'GYD',\r\n    'HTG',\r\n    'USD',\r\n    'AUD',\r\n    'EUR',\r\n    'HNL',\r\n    'HKD',\r\n    'HUF',\r\n    'ISK',\r\n    'INR',\r\n    'IDR',\r\n    'XDR',\r\n    'IRR',\r\n    'IQD',\r\n    'EUR',\r\n    'GBP',\r\n    'ILS',\r\n    'EUR',\r\n    'JMD',\r\n    'JPY',\r\n    'GBP',\r\n    'JOD',\r\n    'KZT',\r\n    'KES',\r\n    'AUD',\r\n    'KPW',\r\n    'KRW',\r\n    'KWD',\r\n    'KGS',\r\n    'LAK',\r\n    'EUR',\r\n    'LBP',\r\n    'LSL',\r\n    'ZAR',\r\n    'LRD',\r\n    'LYD',\r\n    'CHF',\r\n    'EUR',\r\n    'EUR',\r\n    'MOP',\r\n    'MKD',\r\n    'MGA',\r\n    'MWK',\r\n    'MYR',\r\n    'MVR',\r\n    'XOF',\r\n    'EUR',\r\n    'USD',\r\n    'EUR',\r\n    'MRU',\r\n    'MUR',\r\n    'EUR',\r\n    'XUA',\r\n    'MXN',\r\n    'MXV',\r\n    'USD',\r\n    'MDL',\r\n    'EUR',\r\n    'MNT',\r\n    'EUR',\r\n    'XCD',\r\n    'MAD',\r\n    'MZN',\r\n    'MMK',\r\n    'NAD',\r\n    'ZAR',\r\n    'AUD',\r\n    'NPR',\r\n    'EUR',\r\n    'XPF',\r\n    'NZD',\r\n    'NIO',\r\n    'XOF',\r\n    'NGN',\r\n    'NZD',\r\n    'AUD',\r\n    'USD',\r\n    'NOK',\r\n    'OMR',\r\n    'PKR',\r\n    'USD',\r\n    'PAB',\r\n    'USD',\r\n    'PGK',\r\n    'PYG',\r\n    'PEN',\r\n    'PHP',\r\n    'NZD',\r\n    'PLN',\r\n    'EUR',\r\n    'USD',\r\n    'QAR',\r\n    'EUR',\r\n    'RON',\r\n    'RUB',\r\n    'RWF',\r\n    'EUR',\r\n    'SHP',\r\n    'XCD',\r\n    'XCD',\r\n    'EUR',\r\n    'EUR',\r\n    'XCD',\r\n    'WST',\r\n    'EUR',\r\n    'STN',\r\n    'SAR',\r\n    'XOF',\r\n    'RSD',\r\n    'SCR',\r\n    'SLL',\r\n    'SGD',\r\n    'ANG',\r\n    'XSU',\r\n    'EUR',\r\n    'EUR',\r\n    'SBD',\r\n    'SOS',\r\n    'ZAR',\r\n    'SSP',\r\n    'EUR',\r\n    'LKR',\r\n    'SDG',\r\n    'SRD',\r\n    'NOK',\r\n    'SZL',\r\n    'SEK',\r\n    'CHF',\r\n    'CHE',\r\n    'CHW',\r\n    'SYP',\r\n    'TWD',\r\n    'TJS',\r\n    'TZS',\r\n    'THB',\r\n    'USD',\r\n    'XOF',\r\n    'NZD',\r\n    'TOP',\r\n    'TTD',\r\n    'TND',\r\n    'TRY',\r\n    'TMT',\r\n    'USD',\r\n    'AUD',\r\n    'UGX',\r\n    'UAH',\r\n    'AED',\r\n    'GBP',\r\n    'USD',\r\n    'USD',\r\n    'USN',\r\n    'UYU',\r\n    'UYI',\r\n    'UYW',\r\n    'UZS',\r\n    'VUV',\r\n    'VES',\r\n    'VND',\r\n    'USD',\r\n    'USD',\r\n    'XPF',\r\n    'MAD',\r\n    'YER',\r\n    'ZMW',\r\n    'ZWL',\r\n    'XBA',\r\n    'XBB',\r\n    'XBC',\r\n    'XBD',\r\n    'XTS',\r\n    'XXX',\r\n    'XAU',\r\n    'XPD',\r\n    'XPT',\r\n    'XAG'\r\n];","import { InjectedIntl } from 'react-intl';\nimport memoizeIntlConstructor from 'intl-format-cache';\n\n// Use a memoized formatter as creating instances of Intl formats is an expensive operation\nconst getNumberFormat = memoizeIntlConstructor(Intl.NumberFormat);\n\nexport const intlStyle = {\n  DECIMAL: 'decimal',\n  PERCENT: 'percent',\n  CURRENCY: 'currency'\n};\n\nexport const defaultFractionDigits = {\n  DECIMAL: 2,\n  PERCENT: 2\n};\n\nexport const extraFractionDigits = {\n  RATE: 2,\n  TECH_RATE: 4\n};\n\n// Find the default minimum fraction digits for a locale and currency code\nexport function getDefaultFractionDigitsForLocale(locale: string, options?: Intl.NumberFormatOptions) {\n  const numberFormat = getNumberFormat(locale, options);\n  const { minimumFractionDigits, maximumFractionDigits } = numberFormat.resolvedOptions();\n  return { minimumFractionDigits, maximumFractionDigits };\n}\n\nexport function getDecimalSeparator({ formatNumber }: InjectedIntl) {\n  const testValue = formatNumber(1.1);\n  return testValue[1];\n}\n\nexport function parseDecimal(value: unknown, decimalSeparator: string, allowNegative: boolean) {\n  // Return the value as-is if it's already a number\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  if (typeof value === 'string') {\n    if (value.trim() === '') {\n      return undefined;\n    }\n\n    // Build regex to strip out everything except digits and decimal point\n    const regex = new RegExp(`[^0-9${decimalSeparator}]`, 'g');\n    const isNegative = allowNegative && /^-/.test(value);\n    const parsedValue = parseFloat(\n      value\n        .replace(regex, '') // strip out any cruft\n        .replace(decimalSeparator, '.') // make sure decimal point is standard\n    );\n\n    if (!Number.isNaN(parsedValue)) {\n      return isNegative ? parsedValue * -1 : parsedValue;\n    }\n  }\n\n  return undefined;\n}\n","/* eslint-disable react/style-prop-object */\nimport * as React from 'react';\nimport { injectIntl, InjectedIntlProps } from 'react-intl';\nimport { Icon, Input, InputProps } from \"semantic-ui-react\";\n\n\nimport {\n  getDecimalSeparator,\n  getDefaultFractionDigitsForLocale,\n  parseDecimal as parseNumber,\n  intlStyle,\n  defaultFractionDigits,\n  extraFractionDigits\n} from './IntlUtils';\n\nexport const replaceAll = (\n  stringToWorkOn: string,\n  stringToReplace: string,\n  stringToReplaceWith: string,\n  ignoreCase = false\n): string => {\n  const re = new RegExp(\n    stringToReplace.replace(/([/,!\\\\^${}[\\]().*+?|<>\\-&])/g, \"\\\\$&\"),\n    ignoreCase ? \"gi\" : \"g\"\n  );\n  stringToReplaceWith =\n    typeof stringToReplaceWith === \"string\"\n      ? stringToReplaceWith.replace(/\\$/g, \"$$$$\")\n      : stringToReplaceWith;\n  return stringToWorkOn.replace(re, stringToReplaceWith);\n};\n\nconst NEGATIVE_SYMBOL = '-';\nconst DECIMAL_REGEX = /[.,]/;\nconst NEGATIVE_DECIMAL_REGEX = /^-[.,]/;\nconst NUMBER_REGEX = /^\\d*[.,]?\\d*$/;\nconst NEGATIVE_NUMBER_REGEX = /^-?\\d*[.,]?\\d*$/;\nconst NBSP = '\\u00A0';\n\nexport type NumberEditorChildrenProps = { isInvalid: boolean; getInputProps: () => InputProps; };\nexport type NumberEditorChildren = (props: NumberEditorChildrenProps) => React.ReactNode;\nexport type NumberEditorBaseProps = NumberEditorProps & InjectedIntlProps;\n\nexport type SupportedHtmlInputProps = Pick<\n  React.HTMLProps<HTMLInputElement>,\n  'autoFocus' | 'disabled' | 'readOnly' | 'name' | 'tabIndex' | 'title'\n>;\n\ntype SupportedNumberFormatOptions = Pick<\n  Intl.NumberFormatOptions,\n  'style' | 'currency' | 'minimumFractionDigits' | 'maximumFractionDigits'\n>;\n\nexport type NumberEditorProps = SupportedHtmlInputProps & SupportedNumberFormatOptions & {\n  value?: number;\n  allowNegative?: boolean;\n  defaultFractionDigits?: number;\n  extraFractionDigits?: number;\n  children: NumberEditorChildren;\n  onChange: (value?: number) => void;\n};\n\ninterface NumberEditorBaseState {\n  displayValue: string;\n  isInvalid: boolean;\n  isFocused: boolean;\n}\n\ntype InternalSetStateParams = NumberEditorBaseState & { value?: number; };\n\nfunction replaceDecimalSeparator(value: string | number | undefined | null, separator: string) {\n  return value != null\n    ? value.toString().replace(DECIMAL_REGEX, separator)\n    : '';\n}\n\nfunction removeNegativeSymbol(value: string | number | undefined | null) {\n  return value != null\n    ? value.toString().slice(1)\n    : '';\n}\n\nclass NumberEditorBase extends React.Component<NumberEditorBaseProps, NumberEditorBaseState> {\n  readonly decimalSeparator: string;\n  readonly allowNegative: boolean;\n  readonly minimumFractionDigits: number;\n  readonly maximumFractionDigits: number;\n  readonly state: Readonly<NumberEditorBaseState>;\n\n  input = React.createRef<Input>();\n\n  constructor(props: NumberEditorBaseProps) {\n    super(props);\n    const { intl, currency, style, minimumFractionDigits, maximumFractionDigits, defaultFractionDigits, extraFractionDigits, allowNegative = false } = this.props;\n    // The default value of minimumFractionDigits for currency formatting is the number of minor unit digits provided by the ISO 4217 currency code list\n    // If the maximumFractionDigits value is less than the default minimumFractionDigits then Intl.NumberFormat throws an error.\n    let minimumFractionDigitsForStyle = minimumFractionDigits;\n    if (style === intlStyle.CURRENCY && typeof minimumFractionDigits === 'undefined' && typeof maximumFractionDigits !== 'undefined') {\n      const { minimumFractionDigits: minimumFractionDigitsForCurrency } = getDefaultFractionDigitsForLocale(intl.locale, { currency, style });\n      if (minimumFractionDigitsForCurrency > maximumFractionDigits) {\n        minimumFractionDigitsForStyle = maximumFractionDigits;\n      }\n    }\n\n    const {\n      minimumFractionDigits: minimumFractionDigitsForLocale,\n      maximumFractionDigits: maximumFractionDigitsForLocale\n    } = getDefaultFractionDigitsForLocale(intl.locale, {\n      currency,\n      style,\n      minimumFractionDigits: minimumFractionDigitsForStyle,\n      maximumFractionDigits\n    });\n\n    this.allowNegative = allowNegative;\n    this.decimalSeparator = getDecimalSeparator(intl);\n    this.minimumFractionDigits = minimumFractionDigitsForLocale;\n    this.maximumFractionDigits = maximumFractionDigitsForLocale;\n    if (typeof minimumFractionDigits === 'undefined' && typeof maximumFractionDigits === 'undefined') {\n      // Only set default values if none of the fraction digits are provided\n      if (typeof defaultFractionDigits !== 'undefined') {\n        this.minimumFractionDigits = defaultFractionDigits;\n        this.maximumFractionDigits = defaultFractionDigits;\n      } else if (typeof extraFractionDigits !== 'undefined') {\n        this.minimumFractionDigits = minimumFractionDigitsForLocale + extraFractionDigits;\n        this.maximumFractionDigits = minimumFractionDigitsForLocale + extraFractionDigits;\n      }\n    }\n\n    this.state = this.getInitialState();\n  }\n\n  isCopyPaste = false;\n\n  componentDidMount() {\n    const { autoFocus } = this.props;\n    if (autoFocus) {\n      const { current } = this.input;\n      if (current != null) {\n        current.focus();\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps: NumberEditorBaseProps, prevState: NumberEditorBaseState) {\n    const { isInvalid, isFocused } = this.state;\n    // Select the text if the value is invalid or the control is focused\n    if (isInvalid || (prevState.isFocused !== isFocused && isFocused)) {\n      const { current } = this.input;\n      if (current != null) {\n        (current as any).select();\n      }\n    }\n  }\n\n  formatValue(value: number) {\n    const { intl, style, currency } = this.props;\n    const { minimumFractionDigits, maximumFractionDigits } = this;\n\n    return intl.formatNumber(value, { style, currency, minimumFractionDigits, maximumFractionDigits });\n  }\n\n  testPastedValue(valueToTest: number, pastedValue: string, options: Intl.NumberFormatOptions) {\n    const allowedValue = this.props.intl.formatNumber(valueToTest, options);\n    return pastedValue === replaceAll(allowedValue, NBSP, ' ');\n  }\n\n  checkValidity = (value: string | number = '') =>\n    this.allowNegative ? NEGATIVE_NUMBER_REGEX.test(value.toString()) : NUMBER_REGEX.test(value.toString());\n\n  isPastedValueValid(pastedValue: string, parsedValue: number) {\n    // If the formatted value is same as the pasted value then it is considered valid\n    // All other values are invalid. This does not handle all the cases as it is difficult\n    // to address all the valid cases. This algorithm will be modified as needed\n    const { style, currency } = this.props;\n    const { maximumFractionDigits } = this;\n\n    for (let fractionDigits = 0; fractionDigits <= maximumFractionDigits; fractionDigits++) {\n      const decimalOptions = {\n        style: intlStyle.DECIMAL,\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits\n      };\n\n      if (this.testPastedValue(parsedValue, pastedValue, decimalOptions)) {\n        return true;\n      }\n\n      if (this.testPastedValue(parsedValue, pastedValue, { ...decimalOptions, useGrouping: false })) {\n        return true;\n      }\n\n      if (style === intlStyle.CURRENCY) {\n        const currencyOptions = {\n          currency,\n          style,\n          minimumFractionDigits: fractionDigits,\n          maximumFractionDigits\n        };\n\n        if (this.testPastedValue(parsedValue, pastedValue, currencyOptions)) {\n          return true;\n        }\n\n        if (this.testPastedValue(parsedValue, pastedValue, { ...currencyOptions, useGrouping: false })) {\n          return true;\n        }\n      }\n\n      if (style === intlStyle.PERCENT) {\n        const percentOptions = {\n          style,\n          minimumFractionDigits: fractionDigits,\n          maximumFractionDigits\n        };\n\n        if (this.testPastedValue(parsedValue / 100, pastedValue, percentOptions)) {\n          return true;\n        }\n\n        if (this.testPastedValue(parsedValue / 100, pastedValue, { ...percentOptions, useGrouping: false })) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isInteger() {\n    const { minimumFractionDigits, maximumFractionDigits } = this;\n    return minimumFractionDigits === 0 && maximumFractionDigits === 0;\n  }\n\n  getValue() {\n    const { value, style } = this.props;\n    if (value != null && style === intlStyle.PERCENT) {\n      return value * 100;\n    }\n    return value;\n  }\n\n  getDisplayValue() {\n    const value = this.getValue();\n    const { minimumFractionDigits, maximumFractionDigits } = this;\n\n    return value != null\n      ? this.props.intl.formatNumber(value, {\n        style: intlStyle.DECIMAL,\n        minimumFractionDigits,\n        maximumFractionDigits,\n        useGrouping: false\n      })\n      : '';\n  }\n\n  getInitialState() {\n    return {\n      displayValue: this.getDisplayValue(),\n      isInvalid: false,\n      isFocused: false\n    };\n  }\n\n  internalSetState = <K extends keyof InternalSetStateParams>(stateToSet: Pick<InternalSetStateParams, K>) => {\n    const { style } = this.props;\n    const isValueChanged = stateToSet.hasOwnProperty('value');\n    const { value, ...state } = stateToSet as { value?: number; };\n    this.setState(state, () => {\n      let valueToSave = value;\n      if (valueToSave != null && style === intlStyle.PERCENT) {\n        valueToSave /= 100;\n      }\n      if (isValueChanged && this.props.value !== valueToSave) {\n        this.props.onChange(valueToSave);\n      }\n    });\n  };\n\n  handleCopyPaste = (pastedValue: string) => {\n    this.isCopyPaste = false;\n    const parsedValue = parseNumber(pastedValue, this.decimalSeparator, this.allowNegative);\n    const isInvalid = parsedValue == null || !this.isPastedValueValid(pastedValue, parsedValue);\n\n    if (isInvalid) {\n      // Show the invalid displayValue, we do not change the underlying value\n      // displayValue will be reverted to the last valid value on the next action (blur, click)\n      this.internalSetState({\n        displayValue: pastedValue,\n        isInvalid: true\n      });\n      return;\n    }\n\n    // Value is valid, show the value without any formating elements (percentage, currency symbols etc.)\n    this.internalSetState({\n      value: parsedValue,\n      displayValue: replaceDecimalSeparator(parsedValue, this.decimalSeparator),\n      isInvalid: false\n    });\n  };\n\n  handleChange = ({ target }: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = target;\n\n    if (value === '') {\n      this.internalSetState({\n        value: undefined,\n        displayValue: '',\n        isInvalid: false\n      });\n      return;\n    }\n\n    if (this.isCopyPaste) {\n      this.handleCopyPaste(value);\n      return;\n    }\n\n    if (value === NEGATIVE_SYMBOL) {\n      this.internalSetState({\n        value: undefined,\n        displayValue: this.allowNegative ? NEGATIVE_SYMBOL : '',\n        isInvalid: false\n      });\n      return;\n    }\n\n    // Check if value is a valid number\n    if (this.checkValidity(value)) {\n      // Check if value has a decimal separator\n      if (DECIMAL_REGEX.test(value)) {\n        if (this.isInteger()) {\n          return;\n        }\n\n        // Replace the decimal separator as per the current locale\n        const displayValue = replaceDecimalSeparator(value, this.decimalSeparator);\n        // Add \"0\" in front if the decimal separator is entered in empty field\n        if (displayValue.length === 1) {\n          this.internalSetState({\n            value: 0,\n            displayValue: `0${displayValue}`,\n            isInvalid: false\n          });\n          return;\n        }\n\n        // Add \"0\" in front of the decimal separator if the decimal separator succeds the negative symbol\n        if (NEGATIVE_DECIMAL_REGEX.test(value)) {\n          const negativeFormattedValue = `-0${removeNegativeSymbol(displayValue)}`;\n          this.internalSetState({\n            value: parseFloat(negativeFormattedValue),\n            displayValue: negativeFormattedValue,\n            isInvalid: false\n          });\n          return;\n        }\n\n        // Check the precision setting and set the maximum fraction digits.\n        const { maximumFractionDigits } = this;\n        const [displayValueIntegerPart, displayValueDecimalPart] = displayValue.split(this.decimalSeparator);\n\n        if (displayValueDecimalPart.length > maximumFractionDigits) {\n          const roundedDisplayValue = `${displayValueIntegerPart}${this.decimalSeparator}${displayValueDecimalPart.slice(0, maximumFractionDigits)}`;\n          this.internalSetState({\n            value: parseFloat(replaceDecimalSeparator(roundedDisplayValue, '.')),\n            displayValue: roundedDisplayValue,\n            isInvalid: false\n          });\n          return;\n        }\n\n        this.internalSetState({\n          value: parseFloat(replaceDecimalSeparator(value, '.')),\n          displayValue,\n          isInvalid: false\n        });\n        return;\n      }\n\n      // Value has no decimal separator. Convert value to number and convert\n      // it back to string. This removes the leading 0 i.e 01 -> 1\n      const parsedValue = parseFloat(value);\n      this.internalSetState({\n        value: parsedValue,\n        displayValue: parsedValue.toString(),\n        isInvalid: false\n      });\n      return;\n    }\n\n    // Value is not a valid number so it is rejected\n    if (this.state.isInvalid) {\n      // Clear the value if the control is in invalid state\n      this.internalSetState({\n        value: undefined,\n        displayValue: '',\n        isInvalid: false\n      });\n    }\n  };\n\n  handleFocus = () => {\n    this.setState({ isFocused: true });\n  };\n\n  handleBlur = () => {\n    this.internalSetState({\n      isFocused: false,\n      isInvalid: false,\n      displayValue: this.getDisplayValue()\n    });\n  };\n\n  handleClick = () => {\n    if (this.state.isInvalid) {\n      this.internalSetState({\n        displayValue: this.getDisplayValue(),\n        isInvalid: false\n      });\n    }\n  };\n\n  handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if ((e.ctrlKey || e.metaKey) && !e.altKey && e.keyCode === 86) {\n      this.isCopyPaste = true;\n    }\n  };\n\n  handlePaste = () => {\n    this.isCopyPaste = true;\n  };\n\n  getInputProps = () => {\n    const { value, name, title, tabIndex, disabled, readOnly } = this.props;\n    const { displayValue, isFocused } = this.state;\n    const inputValue = !isFocused && value != null ? this.formatValue(value) : displayValue;\n\n    return {\n      name,\n      title,\n      tabIndex,\n      disabled,\n      readOnly,\n      ref: this.input,\n      value: inputValue,\n      onChange: this.handleChange,\n      onFocus: this.handleFocus,\n      onBlur: this.handleBlur,\n      onKeyDown: this.handleKeyDown,\n      onClick: this.handleClick,\n      onPaste: this.handlePaste\n    };\n  };\n\n  getRenderProps() {\n    const { isInvalid } = this.state;\n\n    return {\n      isInvalid,\n      getInputProps: this.getInputProps\n    };\n  }\n\n  render() {\n    return this.props.children(this.getRenderProps());\n  }\n}\n\nexport const NumberEditor = injectIntl(NumberEditorBase);\n\nconst errorMessage =\n  \"Invalid format. Only numbers and single decimal separator are allowed.\";\nconst errorIcon = <Icon name=\"exclamation circle\" link />;\n\ntype GridNumberEditorProps = Pick<NumberEditorProps, 'allowNegative'> & {\n  defaultValue?: number;\n  children?: NumberEditorChildren;\n  autoFocus?: boolean;\n};\n\ninterface GridNumberEditorState {\n  value?: number;\n}\n\ntype NumberEditorFactoryProps = Pick<NumberEditorProps, 'style' | 'defaultFractionDigits' | 'extraFractionDigits'>;\n\nfunction DefaultGridNumberInput({ getInputProps, isInvalid }: NumberEditorChildrenProps) {\n  return (\n    <Input\n      {...getInputProps()}\n      className={isInvalid ? 'invalidGridInput' : undefined}\n      icon={isInvalid && errorIcon}\n      iconPosition=\"left\" />\n  );\n}\n\nfunction gridNumberEditorFactory<P extends GridNumberEditorProps>(intlProps: NumberEditorFactoryProps): React.ComponentClass<P, GridNumberEditorState> {\n  return class GridNumberEditor extends React.Component<P, GridNumberEditorState> {\n    readonly state: Readonly<GridNumberEditorState> = { value: this.props.defaultValue };\n\n    handleChange = (value?: number) => {\n      this.setState({ value });\n    };\n\n    getValue() {\n      return this.state.value;\n    }\n\n    render() {\n      const { defaultValue, autoFocus, children, ...rest } = this.props;\n      return (\n        <NumberEditor\n          {...intlProps}\n          {...rest}\n          value={this.state.value}\n          onChange={this.handleChange}>\n          {p =>\n            children\n              ? (children as NumberEditorChildren)(p)\n              : <DefaultGridNumberInput {...p} />\n          }\n        </NumberEditor>\n      );\n    }\n  };\n}\n\nexport type GridIntegerEditorProps = GridNumberEditorProps;\nexport const GridIntegerEditor = gridNumberEditorFactory<GridIntegerEditorProps>({\n  style: intlStyle.DECIMAL,\n  defaultFractionDigits: 0\n});\n\nexport type GridUnitsEditorProps = GridIntegerEditorProps;\nexport { GridIntegerEditor as GridUnitsEditor };\n\nexport type GridDecimalEditorProps = GridNumberEditorProps & Pick<NumberEditorBaseProps, 'minimumFractionDigits' | 'maximumFractionDigits'>;\nexport const GridDecimalEditor = gridNumberEditorFactory<GridDecimalEditorProps>({\n  style: intlStyle.DECIMAL,\n  defaultFractionDigits: defaultFractionDigits.DECIMAL\n});\n\nexport type GridPercentEditorProps = GridNumberEditorProps & Pick<NumberEditorBaseProps, 'minimumFractionDigits' | 'maximumFractionDigits'>;\nexport const GridPercentEditor = gridNumberEditorFactory<GridPercentEditorProps>({\n  style: intlStyle.PERCENT,\n  defaultFractionDigits: defaultFractionDigits.PERCENT\n});\n\nexport type GridCurrencyEditorProps = GridNumberEditorProps & Pick<NumberEditorBaseProps, 'minimumFractionDigits' | 'maximumFractionDigits' | 'currency'>;\nexport const GridCurrencyEditor = gridNumberEditorFactory<GridCurrencyEditorProps>({\n  style: intlStyle.CURRENCY\n});\n\nexport type GridRateEditorProps = GridNumberEditorProps & Pick<NumberEditorBaseProps, 'currency'>;\nexport const GridRateEditor = gridNumberEditorFactory<GridRateEditorProps>({\n  style: intlStyle.CURRENCY,\n  extraFractionDigits: extraFractionDigits.RATE\n});\n\nexport type GridTechRateEditorProps = GridNumberEditorProps & Pick<NumberEditorBaseProps, 'currency'>;\nexport const GridTechRateEditor = gridNumberEditorFactory<GridTechRateEditorProps>({\n  style: intlStyle.CURRENCY,\n  extraFractionDigits: extraFractionDigits.TECH_RATE\n});\n\ntype FormNumberEditorProps = Pick<NumberEditorProps, 'value' | 'onChange' | 'allowNegative'> & {\n  children?: NumberEditorChildren;\n};\n\nfunction DefaultFormNumberInput({ getInputProps, isInvalid }: NumberEditorChildrenProps) {\n  return (\n    <div style={{ display: 'inline-block' }}>\n      <Input\n        {...getInputProps()}\n        error={isInvalid} />\n      {isInvalid && <div>{errorMessage}</div>}\n    </div>\n  );\n}\n\nfunction formNumberEditorFactory<P extends FormNumberEditorProps>(intlProps: NumberEditorFactoryProps): React.FunctionComponent<P> {\n  return function FormNumberEditor({ value, onChange, children }: P) {\n    return (\n      <NumberEditor\n        {...intlProps}\n        value={value}\n        onChange={onChange}>\n        {children || DefaultFormNumberInput}\n      </NumberEditor>\n    );\n  };\n}\n\nexport type FormDecimalEditorProps = FormNumberEditorProps & Pick<NumberEditorBaseProps, 'minimumFractionDigits' | 'maximumFractionDigits'>;\nexport const FormDecimalEditor = formNumberEditorFactory<FormDecimalEditorProps>({\n  style: intlStyle.DECIMAL,\n  defaultFractionDigits: defaultFractionDigits.DECIMAL\n});\n\nexport type FormPercentEditorProps = FormNumberEditorProps & Pick<NumberEditorBaseProps, 'minimumFractionDigits' | 'maximumFractionDigits'>;\nexport const FormPercentEditor = formNumberEditorFactory<FormPercentEditorProps>({\n  style: intlStyle.PERCENT,\n  defaultFractionDigits: defaultFractionDigits.PERCENT\n});\n\nexport type FormCurrencyEditorProps = FormNumberEditorProps & Pick<NumberEditorBaseProps, 'minimumFractionDigits' | 'maximumFractionDigits'> & { currency: string; };\nexport const FormCurrencyEditor = formNumberEditorFactory<FormCurrencyEditorProps>({\n  style: intlStyle.CURRENCY\n});\n\nexport type FormRateEditorProps = FormNumberEditorProps & { currency: string };\nexport const FormRateEditor = formNumberEditorFactory<FormRateEditorProps>({\n  style: intlStyle.CURRENCY,\n  extraFractionDigits: extraFractionDigits.RATE\n});\n\nexport type FormTechRateEditorProps = FormNumberEditorProps & { currency: string };\nexport const FormTechRateEditor = formNumberEditorFactory<FormTechRateEditorProps>({\n  style: intlStyle.CURRENCY,\n  extraFractionDigits: extraFractionDigits.TECH_RATE\n});\n","/* eslint-disable react/style-prop-object */\nimport * as React from 'react';\nimport { FormattedNumber, injectIntl, InjectedIntlProps } from 'react-intl';\n\nimport {\n  getDefaultFractionDigitsForLocale,\n  intlStyle,\n  defaultFractionDigits,\n  extraFractionDigits\n} from './IntlUtils';\n\ntype SupportedFormattedNumberProps = Pick<\n  FormattedNumber.Props,\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat#Parameters\n  'style' | 'currency' | 'minimumFractionDigits' | 'maximumFractionDigits' | 'children'\n>;\n\ntype NumberFormatterProps = SupportedFormattedNumberProps & {\n  value: number | undefined | null;\n  defaultFractionDigits?: number;\n};\n\nfunction NumberFormatter({ value, minimumFractionDigits, maximumFractionDigits, defaultFractionDigits, ...props }: NumberFormatterProps) {\n  if (value == null) {\n    return null;\n  }\n\n  if (typeof minimumFractionDigits === 'undefined' && typeof maximumFractionDigits === 'undefined' && typeof defaultFractionDigits !== 'undefined') {\n    minimumFractionDigits = defaultFractionDigits;\n    maximumFractionDigits = defaultFractionDigits;\n  }\n\n  return (\n    <FormattedNumber\n      {...props}\n      value={value}\n      minimumFractionDigits={minimumFractionDigits}\n      maximumFractionDigits={maximumFractionDigits} />\n  );\n}\n\nexport type DecimalFormatterProps = Pick<NumberFormatterProps, 'value' | 'minimumFractionDigits' | 'maximumFractionDigits' | 'children'>;\nexport function DecimalFormatter(props: DecimalFormatterProps) {\n  return (\n    <NumberFormatter\n      {...props}\n      style={intlStyle.DECIMAL}\n      defaultFractionDigits={defaultFractionDigits.DECIMAL} />\n  );\n}\n\nexport type IntegerFormatterProps = Pick<NumberFormatterProps, 'value' | 'children'>;\nexport function IntegerFormatter(props: IntegerFormatterProps) {\n  return (\n    <DecimalFormatter\n      {...props}\n      minimumFractionDigits={0}\n      maximumFractionDigits={0} />\n  );\n}\n\nexport type UnitsFormatterProps = IntegerFormatterProps;\nexport { IntegerFormatter as UnitsFormatter };\n\nexport type PercentFormatterProps = DecimalFormatterProps;\nexport function PercentFormatter(props: PercentFormatterProps) {\n  return (\n    <NumberFormatter\n      {...props}\n      style={intlStyle.PERCENT}\n      defaultFractionDigits={defaultFractionDigits.PERCENT} />\n  );\n}\n\nexport type CurrencyFormatterProps = Pick<NumberFormatterProps, 'value' | 'currency' | 'minimumFractionDigits' | 'maximumFractionDigits' | 'children'>;\nexport function CurrencyFormatter(props: CurrencyFormatterProps) {\n  return <NumberFormatter {...props} style={intlStyle.CURRENCY} />;\n}\n\ntype DefaultCurrencyFormatterBaseProps = DefaultCurrencyFormatterProps & InjectedIntlProps & { extraFractionDigits: number };\nfunction DefaultCurrencyFormatterBase({ intl, extraFractionDigits, ...props }: DefaultCurrencyFormatterBaseProps) {\n  // Add extra fraction digits to the default minimum fraction digits for the current locale and currency\n  const defaultFractionDigits = getDefaultFractionDigitsForLocale(\n    intl.locale, {\n      style: intlStyle.CURRENCY,\n      currency: props.currency\n    }\n  ).minimumFractionDigits + extraFractionDigits;\n\n  return (\n    <CurrencyFormatter\n      {...props}\n      minimumFractionDigits={defaultFractionDigits}\n      maximumFractionDigits={defaultFractionDigits} />\n  );\n}\n\ntype DefaultCurrencyFormatterProps = Pick<CurrencyFormatterProps, 'value' | 'currency' | 'children'>;\nconst DefaultCurrencyFormatter = injectIntl(DefaultCurrencyFormatterBase);\n\nexport type RateFormatterProps = DefaultCurrencyFormatterProps;\nexport function RateFormatter(props: RateFormatterProps) {\n  return (\n    <DefaultCurrencyFormatter\n      {...props}\n      extraFractionDigits={extraFractionDigits.RATE} />\n  );\n}\n\nexport type TechRateFormatterProps = DefaultCurrencyFormatterProps;\nexport function TechRateFormatter(props: TechRateFormatterProps) {\n  return (\n    <DefaultCurrencyFormatter\n      {...props}\n      extraFractionDigits={extraFractionDigits.TECH_RATE} />\n  );\n}\n","import './index.css';\nimport * as React from \"react\";\nimport { render } from \"react-dom\";\nimport { IntlProvider, addLocaleData } from \"react-intl\";\n\nimport { currencyCode } from './currenyCode';\n\nimport {\n  GridIntegerEditor,\n  GridDecimalEditor,\n  GridCurrencyEditor,\n  GridPercentEditor,\n  GridRateEditor\n} from \"./IntlEditors\";\n\nimport {\n  DecimalFormatter,\n  CurrencyFormatter,\n  PercentFormatter,\n  RateFormatter,\n  TechRateFormatter\n} from \"./IntlFormatters\";\n\nconst en = require(\"react-intl/locale-data/en\");\nconst fr = require(\"react-intl/locale-data/fr\");\nconst is = require(\"react-intl/locale-data/is\");\n\naddLocaleData([...en, ...fr, ...is]);\n\ninterface Props {\n  allowNegative: boolean;\n  title: string;\n}\nclass Editors extends React.Component<Props> {\n  state = {\n    locale: \"en-US\",\n    minimumFractionDigits: 3,\n    maximumFractionDigits: 4,\n    currencyCode: \"USD\"\n  };\n  handleChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  public render() {\n    const key = `${this.state.locale}-${this.state.currencyCode}-${this.state.minimumFractionDigits}-${this.state.maximumFractionDigits}`;\n    return (\n      <IntlProvider locale={this.state.locale} key={key}>\n        <div>\n          <fieldset>\n            <legend>{this.props.title}</legend>\n            <div style={{ margin: 20 }}>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Locale:\n                  <select\n                    name=\"locale\"\n                    value={this.state.locale}\n                    onChange={this.handleChange}\n                  >\n                    <option value=\"fr-FR\">fr-FR</option>\n                    <option value=\"en-US\">en-US</option>\n                    <option value=\"en-GB\">en-GB</option>\n                    <option value=\"is-IS\">is-IS</option>\n                  </select>\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  minimumFractionDigits:\n                  <input\n                    type=\"number\"\n                    name=\"minimumFractionDigits\"\n                    value={this.state.minimumFractionDigits}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  maximumFractionDigits:\n                  <input\n                    type=\"number\"\n                    name=\"maximumFractionDigits\"\n                    value={this.state.maximumFractionDigits}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  currency code:\n                  <select\n                    name=\"currencyCode\"\n                    value={this.state.currencyCode}\n                    onChange={this.handleChange}\n                  >\n                    {currencyCode.sort().map(c => <option value={c}>{c}</option>)}\n                  </select>\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Grid Integer Editor:\n                  <GridIntegerEditor\n                    defaultValue={2}\n                    allowNegative={this.props.allowNegative}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Grid Decimal Editor:\n                  <GridDecimalEditor\n                    defaultValue={2}\n                    allowNegative={this.props.allowNegative}\n                    minimumFractionDigits={this.state.minimumFractionDigits || undefined}\n                    maximumFractionDigits={this.state.maximumFractionDigits || undefined}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Grid Currency Editor:\n                  <GridCurrencyEditor\n                    defaultValue={2}\n                    currency={this.state.currencyCode}\n                    minimumFractionDigits={this.state.minimumFractionDigits || undefined}\n                    maximumFractionDigits={this.state.maximumFractionDigits || undefined}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Grid Percent Editor:\n                  <GridPercentEditor\n                    defaultValue={0.2}\n                    allowNegative={this.props.allowNegative}\n                    minimumFractionDigits={this.state.minimumFractionDigits || undefined}\n                    maximumFractionDigits={this.state.maximumFractionDigits || undefined}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Grid Rate Editor:\n                  <GridRateEditor\n                    defaultValue={20}\n                    currency={this.state.currencyCode}\n                  />\n                </label>\n              </div>\n            </div>\n          </fieldset>\n        </div>\n      </IntlProvider>\n    );\n  }\n}\n\nclass Formatters extends React.Component {\n  state = {\n    locale: \"en-US\",\n    minimumFractionDigits: 3,\n    maximumFractionDigits: 4,\n    currencyCode: \"USD\",\n    currencyFormatterValue: 2,\n    decimalFormatterValue: 1.2,\n    percentFormatterValue: 0.2,\n    rateFormatterValue: 3.4,\n    techRateFormatterValue: 1.2\n  };\n  handleChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  public render() {\n    const key = `${this.state.locale}-${this.state.currencyCode}-${this.state.minimumFractionDigits}-${this.state.maximumFractionDigits}`;\n    return (\n      <IntlProvider locale={this.state.locale} key={key}>\n        <div>\n          <fieldset>\n            <legend>Formatters</legend>\n            <div style={{ margin: 20 }}>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Locale:\n                  <select\n                    name=\"locale\"\n                    value={this.state.locale}\n                    onChange={this.handleChange}\n                  >\n                    <option value=\"fr-FR\">fr-FR</option>\n                    <option value=\"en-US\">en-US</option>\n                    <option value=\"en-GB\">en-GB</option>\n                    <option value=\"is-IS\">is-IS</option>\n                  </select>\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  minimumFractionDigits:\n                  <input\n                    type=\"number\"\n                    name=\"minimumFractionDigits\"\n                    value={this.state.minimumFractionDigits}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  maximumFractionDigits:\n                  <input\n                    type=\"number\"\n                    name=\"maximumFractionDigits\"\n                    value={this.state.maximumFractionDigits}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  currency code:\n                  <select\n                    name=\"currencyCode\"\n                    value={this.state.currencyCode}\n                    onChange={this.handleChange}\n                  >\n                    {currencyCode.sort().map(c => <option value={c}>{c}</option>)}\n                  </select>\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Decimal Formatter:\n                  <input\n                    type=\"number\"\n                    name=\"decimalFormatterValue\"\n                    value={this.state.decimalFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <DecimalFormatter\n                    value={this.state.decimalFormatterValue}\n                    minimumFractionDigits={this.state.minimumFractionDigits || undefined}\n                    maximumFractionDigits={this.state.maximumFractionDigits || undefined}\n                  />\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  CurrencyFormatter:\n                  <input\n                    type=\"number\"\n                    name=\"currencyFormatterValue\"\n                    value={this.state.currencyFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <CurrencyFormatter\n                    value={this.state.currencyFormatterValue}\n                    currency={this.state.currencyCode}\n                    minimumFractionDigits={this.state.minimumFractionDigits || undefined}\n                    maximumFractionDigits={this.state.maximumFractionDigits || undefined}\n                  />\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  PercentFormatter:\n                  <input\n                    type=\"number\"\n                    name=\"percentFormatterValue\"\n                    value={this.state.percentFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <PercentFormatter\n                    value={this.state.percentFormatterValue}\n                    minimumFractionDigits={this.state.minimumFractionDigits || undefined}\n                    maximumFractionDigits={this.state.maximumFractionDigits || undefined}\n                  />\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Rate Formatter:\n                  <input\n                    type=\"number\"\n                    name=\"rateFormatterValue\"\n                    value={this.state.rateFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <RateFormatter\n                    value={this.state.rateFormatterValue}\n                    currency={this.state.currencyCode}\n                  />\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Tech Rate Formatter:\n                  <input\n                    type=\"number\"\n                    name=\"techRateFormatterValue\"\n                    value={this.state.techRateFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <TechRateFormatter\n                    value={this.state.techRateFormatterValue}\n                    currency={this.state.currencyCode}\n                  />\n                </label>\n              </div>\n            </div>\n          </fieldset>\n        </div>\n      </IntlProvider>\n    );\n  }\n}\n\nclass App extends React.Component {\n  componentDidCatch() {\n    console.log('An error occurred');\n  }\n\n  render() {\n    return (\n      <div>\n        <Editors title=\"Editors\" allowNegative={false}/>\n        <Editors title=\"Editors with Negative values\" allowNegative={true}/>\n        <Formatters />\n      </div>\n    );\n  }\n}\n\nrender(\n  <App />,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}